<?xml version="1.0" encoding="UTF-8"?>

<project name="freeasso" default="help" basedir=".">

    <!--  all properties are in build.properties -->
    <property file="project.properties" />
    <property name="basedir" value="." />
    <property name="pdepend" value="${basedir}/vendor/bin/pdepend" />
    <property name="phpcpd" value="${basedir}/vendor/bin/phpcpd" />
    <property name="phpcs" value="${basedir}/vendor/bin/phpcs" />
    <property name="phpdox" value="${basedir}/vendor/bin/phpdox" />
    <property name="phploc" value="${basedir}/vendor/bin/phploc" />
    <property name="phpmd" value="${basedir}/vendor/bin/phpmd" />
    <property name="phpunit" value="${basedir}/vendor/bin/phpunit" />

    <!--
        Help
    -->
    <target name="help" description="Display help">
        <exec command="${phing.bin} -l" passthru="true" />
        <exec executable="env" passthru="true" />
    </target>

    <!--
        Infos
    -->
    <target name="infos" description="Display infos">
        <echo message="env : ${env}" />
        <echo message="host : ${hostname}" />
    </target>

    <!--
        Composer
    -->
    <target name="composer">
        <composer command="install" composer="${composer.bin}">
            <arg value="--optimize-autoloader" />
            <arg value="--no-dev" />
        </composer>
    </target>

    <!--
        Composer
    -->
    <target name="composer-dev">
        <composer command="install" composer="${composer.bin}">
            <arg value="--optimize-autoloader" />
        </composer>
    </target>

    <!--
        Composer
    -->
    <target name="link-dev">
        <delete dir="${basedir}/vendor/jeromeklam" />
        <mkdir dir="${basedir}/vendor/jeromeklam" />
        <symlink target="../../../freefw" link="${basedir}/vendor/jeromeklam/freefw" overwrite="true" relative="true" />
        <symlink target="../../../freeoffice" link="${basedir}/vendor/jeromeklam/freeoffice" overwrite="true" relative="true" />
        <symlink target="../../../freepm" link="${basedir}/vendor/jeromeklam/freepm" overwrite="true" relative="true" />
        <symlink target="../../../freesso" link="${basedir}/vendor/jeromeklam/freesso" overwrite="true" relative="true" />
        <symlink target="../../../freews" link="${basedir}/vendor/jeromeklam/freews" overwrite="true" relative="true" />
    </target>

    <!--
        Composer
    -->
    <target name="bower">
        <exec command="bower install" />
    </target>

    <target name="full-build" depends="prepare,static-analysis,phpunit-ci,phpdox,-check-failure" description="Performs static analysis, runs the tests, and generates project documentation" />

    <target name="full-build-parallel" depends="prepare,static-analysis-parallel,phpunit-ci,phpdox,-check-failure" description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation" />

    <target name="quick-build" depends="prepare,lint,phpunit" description="Performs a lint check and runs the tests (without generating code coverage reports)" />

    <target name="static-analysis" depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci" description="Performs static analysis" />

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel" description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend" />
                <antcall target="phpmd-ci" />
            </sequential>
            <antcall target="lint" />
            <antcall target="phpcpd-ci" />
            <antcall target="phpcs-ci" />
            <antcall target="phploc-ci" />
        </parallel>
    </target>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${project.builddir}/api" />
        <delete dir="${project.builddir}/coverage" />
        <delete dir="${project.builddir}/logs" />
        <delete dir="${project.builddir}/pdepend" />
        <delete dir="${project.builddir}/phpdox" />
        <property name="clean.done" value="true" />
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
        <mkdir dir="${project.builddir}/api" />
        <mkdir dir="${project.builddir}/coverage" />
        <mkdir dir="${project.builddir}/logs" />
        <mkdir dir="${project.builddir}/pdepend" />
        <mkdir dir="${project.builddir}/phpdox" />
        <property name="prepare.done" value="true" />
    </target>

    <target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
            </fileset>
        </apply>

        <property name="lint.done" value="true" />
    </target>

    <target name="phploc" unless="phploc.done" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phploc.done" value="true" />
    </target>

    <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${project.builddir}/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${project.builddir}/logs/phploc.xml" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phploc.done" value="true" />
    </target>

    <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${project.builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${project.builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${project.builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="pdepend.done" value="true" />
    </target>

    <target name="phpmd" unless="phpmd.done" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg path="${project.builddir}/phpmd.xml" />
        </exec>

        <property name="phpmd.done" value="true" />
    </target>

    <target name="phpmd-ci" unless="phpmd.done" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${project.builddir}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${project.builddir}/logs/pmd.xml" />
        </exec>

        <property name="phpmd.done" value="true" />
    </target>

    <target name="phpcs" unless="phpcs.done" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phpcs.done" value="true" />
    </target>

    <target name="phpcs-ci" unless="phpcs.done" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${project.builddir}/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phpcs.done" value="true" />
    </target>

    <target name="phpcpd" unless="phpcpd.done" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true" />
    </target>

    <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${project.builddir}/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true" />
    </target>

    <target name="phpunit-ci" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" returnProperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration" />
            <arg path="${basedir}/phpunit.xml.dist" />
        </exec>

        <property name="phpunit.done" value="true" />
    </target>

    <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" taskname="phpunit">
            <arg value="--configuration" />
            <arg path="${basedir}/phpunit.xml.dist" />
            <arg value="--no-coverage" />
        </exec>

        <property name="phpunit.done" value="true" />
    </target>

    <target name="phpdox" unless="phpdox.done" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate project documentation using phpDox">
        <exec executable="${phpdox}" taskname="phpdox">
            <arg value="--file" />
            <arg path="${project.builddir}/phpdox.xml" />
        </exec>

        <property name="phpdox.done" value="true" />
    </target>

    <target name="-check-failure">
        <if>
            <not>
                <equals arg1="${result.phpunit}" arg2="0" />
            </not>
            <then>
                <fail message="PHPUnit did not finish successfully" />
            </then>
        </if>
    </target>

    <!--
        Préparation du déploiement : composer, ...
    -->
    <target name="prepare-generic">
        <delete dir="${project.dist}"/>
        <mkdir dir="${project.dist}" mode="0775" />
        <echo message="${commit}" file="${project.basedir}/revision" />
        <filesync excludeFile=".deployignore"
                  sourcedir="${project.basedir}/"
                  options="-LurpKz"
                  destinationdir="${project.dist}" />
    </target>
                    
    <!--
        Création du fichier tgz à partir du répertoire dist
    -->
    <target name="create-tgz-generic">
        <delete dir="${project.deploy}"/>
        <mkdir dir="${project.deploy}" mode="0775" />
        <tar destfile="${project.deploy}/${project.short}-${deploy.version}.tar.gz" basedir="${project.dist}" compression="gzip"/>
        <copy file="${project.basedir}/install/install.sh" tofile="${project.deploy}/install-${deploy.version}.sh" overwrite="true"/>
        <exec command="md5sum ${project.short}-${deploy.version}.tar.gz > ${project.short}-${deploy.version}.tar.gz.checksum" dir="${project.deploy}" />
        <exec command="md5sum install-${deploy.version}.sh > install-${deploy.version}.sh.checksum" dir="${project.deploy}" />
    </target>

    <!--
        Copie générique
    -->
    <target name="host-copy-generic">
        <echo message="copy to ${host}" />
        <ssh username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" command="mkdir -p ${deploy.basedir}" />
        <ssh username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" command="mkdir -p ${deploy.basedir}/${deploy.appfolder}" />
        <ssh username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" command="mkdir -p ${deploy.basedir}/${deploy.appfolder}/back" />
        <ssh username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" command="chmod -R g+w ${deploy.basedir}/${deploy.appfolder}" />
        <echo message="copy files" />
        <scp username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" todir="${deploy.basedir}/${deploy.appfolder}/back">
            <fileset dir="${project.deploy}">
                <include name="*-${deploy.version}.*" />
            </fileset>
        </scp>
        <ssh username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" command="chmod -R 775 ${deploy.basedir}/${deploy.appfolder}/back/install-${deploy.version}.sh" />
    </target>

    <!--
        Installation générique
    -->
    <target name="host-install-generic">
        <echo message="running install script on ${host} : ${deploy.basedir}/${deploy.appfolder}/back/install-${deploy.version}.sh ${project.short}-${deploy.version}" />
        <ssh username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" command="cd ${deploy.basedir}/${deploy.appfolder}/back; ./install-${deploy.version}.sh ${project.short}-${deploy.version} ${deploy.appfolder}.txt" />
        <ssh username="${deploy.user}" pubkeyfile="${deploy.pubkeyfile}" privkeyfile="${deploy.prvkeyfile}"
             host="${host}" command="chmod -R g+w ${deploy.basedir}/${deploy.appfolder}/back" />
    </target>

    <!--
        Déploiement en beta / dev
    -->
    <target name="prepare-beta">
        <phingcall target="prepare-generic">
        </phingcall>
    </target>
    <target name="create-beta">
        <phingcall target="create-tgz-generic">
            <property name="deploy.appfolder" value="kalaweit-dev" />
            <property name="deploy.version" value="beta" />
        </phingcall>
    </target>
    <target name="execute-deploy-beta-kalaweit">
        <property name="deploy.appfolder" value="kalaweit-dev" />
        <property name="deploy.version" value="beta" />
        <foreach list="${deploy.hosts-beta}" param="host" target="host-copy-generic" />
        <foreach list="${deploy.hosts-beta}" param="host" target="host-install-generic" />
        <echo message="that's all folks..." />
    </target>
    <target name="execute-deploy-beta-lesecopattes">
        <property name="deploy.appfolder" value="lesecopattes-dev" />
        <property name="deploy.version" value="beta" />
        <foreach list="${deploy.hosts-beta}" param="host" target="host-copy-generic" />
        <foreach list="${deploy.hosts-beta}" param="host" target="host-install-generic" />
        <echo message="that's all folks..." />
    </target>

</project>
